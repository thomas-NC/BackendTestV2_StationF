{"remainingRequest":"/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/node_modules/babel-loader/lib/index.js!/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/src/services/ReservationsService.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/src/services/ReservationsService.vue","mtime":1568196975440},{"path":"/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/thomasnc/Bureau/B2/Cours-node-js/BackendTestV2/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//on stocke dans ce fichier toutes les fonctions qui vont se connecter aux endpoints de notre API REST.\n//encore une fois on en utilise uniquement une partie, mais le cadre de ce projet je les laisse telles quelles\nvar allReservationsUrl = 'http://localhost:5000/reservations';\nvar reservationUrl = 'http://localhost:5000/reservation';\nexport default {\n  getAllReservations: function getAllReservations() {\n    return fetch(allReservationsUrl).then(function (response) {\n      return response.json();\n    });\n  },\n  getReservation: function getReservation(id) {\n    return fetch(\"\".concat(reservationUrl).concat(id)).then(function (response) {\n      return response.json();\n    });\n  },\n  getAvailableReservations: function getAvailableReservations(date) {\n    return fetch(\"\".concat(allReservationsUrl, \"-check\").concat(date)).then(function (response) {\n      return response.json();\n    });\n  },\n  deleteReservation: function deleteReservation(id) {\n    return fetch(\"\".concat(reservationUrl).concat(id), {\n      method: 'delete'\n    }).then(function (response) {\n      return response.json();\n    });\n  },\n  updateReservation: function updateReservation(id, name, roomName, date, timeStart, timeEnd) {\n    return fetch(\"\".concat(reservationUrl).concat(id), {\n      method: 'put',\n      headers: {\n        'accept': 'application/json',\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"name\": name,\n        \"roomName\": roomName,\n        \"date\": date,\n        \"timeStart\": timeStart,\n        \"timeEnd\": timeEnd\n      })\n    }).then(function (response) {\n      return response.json();\n    });\n  },\n  createReservation: function createReservation(name, roomName, date, timeStart, timeEnd) {\n    return fetch(reservationUrl, {\n      method: 'post',\n      headers: {\n        'accept': 'application/json',\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"name\": name,\n        \"roomName\": roomName,\n        \"date\": date,\n        \"timeStart\": timeStart,\n        \"timeEnd\": timeEnd\n      })\n    }).then(function (response) {\n      return response.json();\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n};",{"version":3,"sources":["ReservationsService.vue"],"names":[],"mappings":"AACA;AACA;AACA,IAAA,kBAAA,GAAA,oCAAA;AACA,IAAA,cAAA,GAAA,mCAAA;AAEA,eAAA;AACA,EAAA,kBADA,gCACA;AACA,WAAA,KAAA,CAAA,kBAAA,CAAA,CACA,IADA,CACA,UAAA,QAAA,EACA;AACA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,KAJA,CAAA;AAKA,GAPA;AAQA,EAAA,cARA,0BAQA,EARA,EAQA;AACA,WAAA,KAAA,WAAA,cAAA,SAAA,EAAA,EAAA,CACA,IADA,CACA,UAAA,QAAA,EACA;AACA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,KAJA,CAAA;AAKA,GAdA;AAeA,EAAA,wBAfA,oCAeA,IAfA,EAgBA;AACA,WAAA,KAAA,WAAA,kBAAA,mBAAA,IAAA,EAAA,CACA,IADA,CACA,UAAA,QAAA,EACA;AACA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,KAJA,CAAA;AAKA,GAtBA;AAuBA,EAAA,iBAvBA,6BAuBA,EAvBA,EAuBA;AACA,WAAA,KAAA,WAAA,cAAA,SAAA,EAAA,GAAA;AACA,MAAA,MAAA,EAAA;AADA,KAAA,CAAA,CAGA,IAHA,CAGA,UAAA,QAAA,EACA;AACA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,KANA,CAAA;AAOA,GA/BA;AAgCA,EAAA,iBAhCA,6BAgCA,EAhCA,EAgCA,IAhCA,EAgCA,QAhCA,EAgCA,IAhCA,EAgCA,SAhCA,EAgCA,OAhCA,EAgCA;AACA,WAAA,KAAA,WAAA,cAAA,SAAA,EAAA,GAAA;AACA,MAAA,MAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AACA,kBAAA,kBADA;AAEA,wBAAA;AAFA,OAFA;AAMA,MAAA,IAAA,EAAA,IAAA,CAAA,SAAA,CACA;AACA,gBAAA,IADA;AAEA,oBAAA,QAFA;AAGA,gBAAA,IAHA;AAIA,qBAAA,SAJA;AAKA,mBAAA;AALA,OADA;AANA,KAAA,CAAA,CAeA,IAfA,CAeA,UAAA,QAAA,EACA;AACA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,KAlBA,CAAA;AAmBA,GApDA;AAqDA,EAAA,iBArDA,6BAqDA,IArDA,EAqDA,QArDA,EAqDA,IArDA,EAqDA,SArDA,EAqDA,OArDA,EAqDA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA;AACA,MAAA,MAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AACA,kBAAA,kBADA;AAEA,wBAAA;AAFA,OAFA;AAMA,MAAA,IAAA,EAAA,IAAA,CAAA,SAAA,CACA;AACA,gBAAA,IADA;AAEA,oBAAA,QAFA;AAGA,gBAAA,IAHA;AAIA,qBAAA,SAJA;AAKA,mBAAA;AALA,OADA;AANA,KAAA,CAAA,CAeA,IAfA,CAeA,UAAA,QAAA,EACA;AACA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,KAlBA,EAmBA,KAnBA,CAmBA,UAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,GAAA;AACA,KArBA,CAAA;AAsBA;AA5EA,CAAA","sourcesContent":["<script>\n//on stocke dans ce fichier toutes les fonctions qui vont se connecter aux endpoints de notre API REST.\n//encore une fois on en utilise uniquement une partie, mais le cadre de ce projet je les laisse telles quelles\nconst allReservationsUrl = 'http://localhost:5000/reservations';\nconst reservationUrl = 'http://localhost:5000/reservation';\n\nexport default {\n    getAllReservations(){\n        return fetch(allReservationsUrl)\n        .then((response) =>\n        {\n            return response.json();\n        })\n    },\n    getReservation(id){\n        return fetch(`${reservationUrl}${id}`)\n        .then((response) =>\n        {\n            return response.json();\n        })\n    },\n    getAvailableReservations(date)\n    {\n        return fetch(`${allReservationsUrl}-check${date}`)\n        .then((response) =>\n        {\n            return response.json();\n        })\n    },\n    deleteReservation(id){\n        return fetch(`${reservationUrl}${id}`, {\n            method: 'delete'\n        })\n        .then((response) => \n        {\n            return response.json();\n        })\n    },\n    updateReservation(id, name, roomName, date, timeStart, timeEnd){\n        return fetch(`${reservationUrl}${id}`, {\n            method: 'put',\n            headers: {\n                'accept' : 'application/json',\n                'content-type' : 'application/json'\n            },\n            body: JSON.stringify(\n            {\n                \"name\": name,\n                \"roomName\": roomName,\n                \"date\": date,\n                \"timeStart\": timeStart,\n                \"timeEnd\": timeEnd\n            })\n        })\n        .then((response) =>\n        {\n            return response.json();\n        })\n    },\n    createReservation(name, roomName, date, timeStart, timeEnd) {\n        return fetch(reservationUrl, {\n            method: 'post',\n            headers: {\n                'accept':'application/json',\n                'content-type':'application/json'\n            },\n            body: JSON.stringify(\n            {\n                \"name\": name,\n                \"roomName\": roomName,\n                \"date\": date,\n                \"timeStart\": timeStart,\n                \"timeEnd\": timeEnd\n            })\n        })\n        .then((response) =>\n        {\n            return response.json();\n        })\n        .catch((err) => {\n            console.log(err);\n        });\n    }\n}\n</script>"],"sourceRoot":"src/services"}]}